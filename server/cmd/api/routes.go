package main

import (
	"net/http"

	_ "web-api/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	httpSwagger "github.com/swaggo/http-swagger/v2"
)

func (app *application) routes() http.Handler {
	mux := chi.NewRouter()
	mux.Use(middleware.Recoverer)
	mux.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "x-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: true,
		MaxAge:           300,
	}))

	// Swagger docs
	mux.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:5050/swagger/doc.json"), //The url pointing to API definition
	))

	mux.Route("/api/v1", func(mux chi.Router) {
		// *** Unprotected routes ***

		mux.Get("/", app.handlers.Welcome)
		// Even though this route is not inside the /users group, it will still work
		// because it comes first. It is left unprotected because login shouldn't be
		// a protected route. It also won't be part of our app because login is handled
		// by Keycloak
		mux.Post("/users/login", app.handlers.Login)

		// These routes will be prefixed by /api/v1/users and require the user role
		mux.Route("/users", func(mux chi.Router) {
			// This is a protected route
			mux.Get("/user", app.handlers.UserAuth)
		})

		// These routes will be prefixed by /api/v1/admin and require the admin role
		mux.Route("/admin", func(mux chi.Router) {
			mux.Get("/test", app.handlers.AdminAuth)
		})

		// New routes for API
		mux.Get("/getAllNasaData", app.handlers.GetAllData)
		mux.Get("/getNasaData/{nasaDataId}", app.handlers.GetNasaDataForId) // route uses dynamic url parameter

		mux.Get("/loadNasaData", app.handlers.LoadNasaData)

	})

	return mux
}
